
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wuyixkzhghqtjjsxwmbt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1eWl4a3poZ2hxdGpqc3h3bWJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjE2MDcsImV4cCI6MjA1ODMzNzYwN30._JpoJB6NfIwFJINOtIM2iWHmXIk86CKiC-gfQKq8vmQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    realtime: {
      params: {
        eventsPerSecond: 40,  // Increased event rate
        fastlane: true,       // Enable fastlane for better performance
        recovery: true,       // Enable automatic connection recovery
        ephemeral: false,     // Set ephemeral to false for data persistence
        transportOptions: {
          maxRetries: 10,      // Increased retry attempts
          retryTimeoutMs: 1000 // Time between reconnection attempts
        }
      }
    },
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true
    },
    db: {
      schema: 'public'
    },
    global: {
      headers: {
        'x-application-name': 'one-piece-quiz'
      },
      fetch: (url, options) => {
        const timeoutController = new AbortController();
        const timeoutId = setTimeout(() => {
          console.warn('Supabase fetch timeout, aborting request');
          timeoutController.abort();
        }, 15000); // 15 second timeout

        const fetchOptions = {
          ...options,
          signal: timeoutController.signal
        };

        return fetch(url, fetchOptions)
          .finally(() => clearTimeout(timeoutId));
      }
    }
  }
);

// Set up dedicated channels for critical tables with unique identifiers
(async () => {
  try {
    // Create a unique channel name with timestamp to avoid conflicts
    const channelName = `room-tables-${Date.now()}`;
    console.log(`Setting up realtime channel: ${channelName}`);
    
    const channel = supabase.channel(channelName)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'rooms' }, (payload) => {
        console.log('Room change detected:', payload);
      })
      .on('postgres_changes', { event: '*', schema: 'public', table: 'room_players' }, (payload) => {
        console.log('Room player change detected:', payload);
      })
      .on('postgres_changes', { event: '*', schema: 'public', table: 'room_messages' }, (payload) => {
        console.log('Room message change detected:', payload);
      });
    
    const status = await channel.subscribe();
    console.log(`Realtime subscriptions status: ${status}`);
    
    if (status === 'SUBSCRIBED') {
      console.log('Realtime subscriptions enabled for rooms tables');
    } else if (status === 'CHANNEL_ERROR') {
      console.error('Error subscribing to realtime channel');
      
      // After a short delay, try to reconnect if there was an error
      setTimeout(() => {
        console.log('Attempting to reconnect to realtime...');
        channel.subscribe();
      }, 5000);
    }
  } catch (error) {
    console.error('Error enabling realtime:', error);
  }
})();

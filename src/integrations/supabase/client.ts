
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wuyixkzhghqtjjsxwmbt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1eWl4a3poZ2hxdGpqc3h3bWJ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjE2MDcsImV4cCI6MjA1ODMzNzYwN30._JpoJB6NfIwFJINOtIM2iWHmXIk86CKiC-gfQKq8vmQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    realtime: {
      params: {
        eventsPerSecond: 20,  // زيادة معدل الأحداث المسموح بها في الثانية
        fastlane: true,       // تمكين fastlane لتحسين الأداء
        recovery: true,       // تمكين الاسترداد التلقائي للاتصال
        ephemeral: false,     // تعيين ephemeral إلى false لضمان استمرارية البيانات
        transportOptions: {
          maxRetries: 5,      // زيادة عدد المحاولات
          retryTimeoutMs: 1000 // الوقت بين كل محاولة إعادة الاتصال
        }
      }
    },
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true  // تمكين اكتشاف الجلسة في عنوان URL
    },
    db: {
      schema: 'public'
    },
    global: {
      headers: {
        'x-application-name': 'one-piece-quiz' // إضافة رأس مخصص للتمييز بين الطلبات
      },
      fetch: fetch // استخدام fetch API القياسية
    }
  }
);

// Enable specific tables for realtime subscription
(async () => {
  try {
    // Enable realtime for the tables we need
    const channel = supabase.channel('enable-realtime')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'rooms' }, () => {
        console.log('Room change detected');
      })
      .on('postgres_changes', { event: '*', schema: 'public', table: 'room_players' }, () => {
        console.log('Room player change detected');
      })
      .on('postgres_changes', { event: '*', schema: 'public', table: 'room_messages' }, () => {
        console.log('Room message change detected');
      });
    
    await channel.subscribe((status) => {
      console.log(`Realtime subscriptions status: ${status}`);
      if (status === 'SUBSCRIBED') {
        console.log('Realtime subscriptions enabled for rooms tables');
      } else if (status === 'CHANNEL_ERROR') {
        console.error('Error subscribing to realtime channel');
      }
    });
  } catch (error) {
    console.error('Error enabling realtime:', error);
  }
})();
